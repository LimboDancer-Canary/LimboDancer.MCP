@page "/ontology/validators"
@using System.Net
@using System.Net.Http
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager Nav
@inject ILogger<OntologyValidators> Logger

<PageTitle>Ontology • Validators</PageTitle>

<h1 class="page-title">Ontology Validators</h1>

@if (string.IsNullOrWhiteSpace(CurrentTenantId))
{
    <div class="empty-tenant">
        <h3>No tenant selected</h3>
        <p>
            This page runs ontology validators against the server for the <em>current tenant</em>.
            Please select a tenant first.
        </p>
    </div>
}
else
{
    <div class="tenant-banner">
        <span class="label">Tenant:</span>
        <span class="value">@CurrentTenantId</span>
    </div>

    <div class="controls">
        <button class="btn btn-primary" @onclick="RunValidation" disabled="@_busy">Run Validation</button>
        <button class="btn btn-secondary" @onclick="ExportOntology" disabled="@_busy">Export Ontology</button>
    </div>

    @if (_busy)
    {
        <div class="status info">Running…</div>
    }

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="status error">@_error</div>
    }

    @if (_result is not null)
    {
        <div class="results">
            <h3>Validation Result</h3>
            @if (_result.IsValid)
            {
                <div class="status success">✅ Validation passed.</div>
            }
            else
            {
                <div class="status warn">⚠️ Validation completed with issues.</div>
            }

            @if (_result.Errors?.Count > 0)
            {
                <ul class="messages">
                    @foreach (var m in _result.Errors)
                    {
                        <li>@m</li>
                    }
                </ul>
            }
        </div>
    }
}

@code {
    [CascadingParameter] public TenantUiState? TenantUiState { get; set; }

    private string CurrentTenantId => TenantUiState?.TenantLabel ?? string.Empty;

    private bool _busy;
    private string? _error;
    private ValidationResultDto? _result;

    private async Task RunValidation()
    {
        _error = null;
        _result = null;

        if (string.IsNullOrWhiteSpace(CurrentTenantId))
        {
            _error = "Tenant is not set.";
            return;
        }

        try
        {
            _busy = true;
            var request = new
            {
                tenantId = CurrentTenantId,
                packageId = "default",
                channelId = "dev"
            };

            var response = await Http.PostAsJsonAsync("/api/ontology/validate", request);
            if (response.IsSuccessStatusCode)
            {
                _result = await response.Content.ReadFromJsonAsync<ValidationResultDto>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _error = $"Server error: {response.StatusCode} - {error}";
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogWarning(ex, "Ontology validate failed.");
            _error = $"Server unreachable: {ex.Message}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error running ontology validation.");
            _error = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            _busy = false;
        }
    }

    private async Task ExportOntology()
    {
        _error = null;

        if (string.IsNullOrWhiteSpace(CurrentTenantId))
        {
            _error = "Tenant is not set.";
            return;
        }

        try
        {
            _busy = true;
            var url = $"/api/ontology/export?tenant={CurrentTenantId}&package=default&channel=dev&format=jsonld";
            var response = await Http.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var fileName = $"ontology-export-{CurrentTenantId}-{DateTime.UtcNow:yyyyMMddHHmmss}.json";
                await BlazorDownload(fileName, content);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _error = $"Export failed: {response.StatusCode} - {error}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error exporting ontology.");
            _error = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            _busy = false;
        }
    }

    private Task BlazorDownload(string filename, string json)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(json ?? "{}");
        var base64 = Convert.ToBase64String(bytes);
        var url = $"data:application/json;base64,{base64}";
        Nav.NavigateTo(url, forceLoad: true);
        return Task.CompletedTask;
    }

    private sealed class ValidationResultDto
    {
        public bool IsValid { get; set; }
        public List<string>? Errors { get; set; }
    }
}

<style>
    /* existing styles remain unchanged */
</style>